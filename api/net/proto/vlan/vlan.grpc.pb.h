// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vlan.proto
#ifndef GRPC_vlan_2eproto__INCLUDED
#define GRPC_vlan_2eproto__INCLUDED

#include "vlan.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Net {

// The LAG service definition.
class VlanManagement final {
 public:
  static constexpr char const* service_full_name() {
    return "Net.VlanManagement";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncCreateVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncCreateVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncCreateVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncCreateVlanRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncDeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncDeleteVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncDeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncDeleteVlanRaw(context, request, cq));
    }
    virtual ::grpc::Status AddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncAddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncAddVlanMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncAddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncAddVlanMemberRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncRemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncRemoveVlanMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncRemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncRemoveVlanMemberRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncCreateVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncCreateVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncDeleteVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncDeleteVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncAddVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncAddVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncRemoveVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncRemoveVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncCreateVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncCreateVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncCreateVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncCreateVlanRaw(context, request, cq));
    }
    ::grpc::Status DeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncDeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncDeleteVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncDeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncDeleteVlanRaw(context, request, cq));
    }
    ::grpc::Status AddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncAddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncAddVlanMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncAddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncAddVlanMemberRaw(context, request, cq));
    }
    ::grpc::Status RemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncRemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncRemoveVlanMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncRemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncRemoveVlanMemberRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void CreateVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void DeleteVlan(::grpc::ClientContext* context, const ::Net::Vlan* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void AddVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void RemoveVlanMember(::grpc::ClientContext* context, const ::Net::VlanMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncCreateVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncCreateVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncDeleteVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncDeleteVlanRaw(::grpc::ClientContext* context, const ::Net::Vlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncAddVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncAddVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncRemoveVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncRemoveVlanMemberRaw(::grpc::ClientContext* context, const ::Net::VlanMember& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVlan_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVlan_;
    const ::grpc::internal::RpcMethod rpcmethod_AddVlanMember_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveVlanMember_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateVlan(::grpc::ServerContext* context, const ::Net::Vlan* request, ::Net::Result* response);
    virtual ::grpc::Status DeleteVlan(::grpc::ServerContext* context, const ::Net::Vlan* request, ::Net::Result* response);
    virtual ::grpc::Status AddVlanMember(::grpc::ServerContext* context, const ::Net::VlanMember* request, ::Net::Result* response);
    virtual ::grpc::Status RemoveVlanMember(::grpc::ServerContext* context, const ::Net::VlanMember* request, ::Net::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateVlan() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVlan(::grpc::ServerContext* context, ::Net::Vlan* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteVlan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVlan(::grpc::ServerContext* context, ::Net::Vlan* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddVlanMember() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVlanMember(::grpc::ServerContext* context, ::Net::VlanMember* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveVlanMember() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveVlanMember(::grpc::ServerContext* context, ::Net::VlanMember* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateVlan<WithAsyncMethod_DeleteVlan<WithAsyncMethod_AddVlanMember<WithAsyncMethod_RemoveVlanMember<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateVlan() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::Vlan, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::Vlan* request, ::Net::Result* response) { return this->CreateVlan(context, request, response); }));}
    void SetMessageAllocatorFor_CreateVlan(
        ::grpc::MessageAllocator< ::Net::Vlan, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::Vlan, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteVlan() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::Vlan, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::Vlan* request, ::Net::Result* response) { return this->DeleteVlan(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteVlan(
        ::grpc::MessageAllocator< ::Net::Vlan, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::Vlan, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddVlanMember() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::VlanMember, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::VlanMember* request, ::Net::Result* response) { return this->AddVlanMember(context, request, response); }));}
    void SetMessageAllocatorFor_AddVlanMember(
        ::grpc::MessageAllocator< ::Net::VlanMember, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::VlanMember, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddVlanMember(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveVlanMember() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::VlanMember, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::VlanMember* request, ::Net::Result* response) { return this->RemoveVlanMember(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveVlanMember(
        ::grpc::MessageAllocator< ::Net::VlanMember, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::VlanMember, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveVlanMember(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateVlan<WithCallbackMethod_DeleteVlan<WithCallbackMethod_AddVlanMember<WithCallbackMethod_RemoveVlanMember<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateVlan() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteVlan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddVlanMember() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveVlanMember() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateVlan() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteVlan() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddVlanMember() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVlanMember(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveVlanMember() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveVlanMember(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateVlan() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateVlan(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteVlan() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteVlan(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddVlanMember() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddVlanMember(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddVlanMember(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveVlanMember() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveVlanMember(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveVlanMember(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateVlan() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::Vlan, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::Vlan, ::Net::Result>* streamer) {
                       return this->StreamedCreateVlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::Vlan,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteVlan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::Vlan, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::Vlan, ::Net::Result>* streamer) {
                       return this->StreamedDeleteVlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteVlan(::grpc::ServerContext* /*context*/, const ::Net::Vlan* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteVlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::Vlan,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddVlanMember() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::VlanMember, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::VlanMember, ::Net::Result>* streamer) {
                       return this->StreamedAddVlanMember(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddVlanMember(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::VlanMember,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveVlanMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveVlanMember() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::VlanMember, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::VlanMember, ::Net::Result>* streamer) {
                       return this->StreamedRemoveVlanMember(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveVlanMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveVlanMember(::grpc::ServerContext* /*context*/, const ::Net::VlanMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveVlanMember(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::VlanMember,::Net::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateVlan<WithStreamedUnaryMethod_DeleteVlan<WithStreamedUnaryMethod_AddVlanMember<WithStreamedUnaryMethod_RemoveVlanMember<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateVlan<WithStreamedUnaryMethod_DeleteVlan<WithStreamedUnaryMethod_AddVlanMember<WithStreamedUnaryMethod_RemoveVlanMember<Service > > > > StreamedService;
};

}  // namespace Net


#endif  // GRPC_vlan_2eproto__INCLUDED
