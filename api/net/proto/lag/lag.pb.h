// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lag.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_lag_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lag_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
#include "interface.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lag_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lag_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_lag_2eproto;
namespace Net {
class Lag;
struct LagDefaultTypeInternal;
extern LagDefaultTypeInternal _Lag_default_instance_;
class LagMember;
struct LagMemberDefaultTypeInternal;
extern LagMemberDefaultTypeInternal _LagMember_default_instance_;
}  // namespace Net
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Net {

// ===================================================================


// -------------------------------------------------------------------

class Lag final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Net.Lag) */ {
 public:
  inline Lag() : Lag(nullptr) {}
  ~Lag() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Lag(
      ::google::protobuf::internal::ConstantInitialized);

  inline Lag(const Lag& from) : Lag(nullptr, from) {}
  inline Lag(Lag&& from) noexcept
      : Lag(nullptr, std::move(from)) {}
  inline Lag& operator=(const Lag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lag& operator=(Lag&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lag& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lag* internal_default_instance() {
    return reinterpret_cast<const Lag*>(
        &_Lag_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Lag& a, Lag& b) { a.Swap(&b); }
  inline void Swap(Lag* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lag* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lag* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Lag>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Lag& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Lag& from) { Lag::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Lag* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Net.Lag"; }

 protected:
  explicit Lag(::google::protobuf::Arena* arena);
  Lag(::google::protobuf::Arena* arena, const Lag& from);
  Lag(::google::protobuf::Arena* arena, Lag&& from) noexcept
      : Lag(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:Net.Lag)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      18, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lag_2eproto;
};
// -------------------------------------------------------------------

class LagMember final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Net.LagMember) */ {
 public:
  inline LagMember() : LagMember(nullptr) {}
  ~LagMember() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LagMember(
      ::google::protobuf::internal::ConstantInitialized);

  inline LagMember(const LagMember& from) : LagMember(nullptr, from) {}
  inline LagMember(LagMember&& from) noexcept
      : LagMember(nullptr, std::move(from)) {}
  inline LagMember& operator=(const LagMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline LagMember& operator=(LagMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LagMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const LagMember* internal_default_instance() {
    return reinterpret_cast<const LagMember*>(
        &_LagMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LagMember& a, LagMember& b) { a.Swap(&b); }
  inline void Swap(LagMember* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LagMember* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LagMember* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LagMember>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LagMember& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LagMember& from) { LagMember::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LagMember* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Net.LagMember"; }

 protected:
  explicit LagMember(::google::protobuf::Arena* arena);
  LagMember(::google::protobuf::Arena* arena, const LagMember& from);
  LagMember(::google::protobuf::Arena* arena, LagMember&& from) noexcept
      : LagMember(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMembersFieldNumber = 2,
    kLagIdFieldNumber = 1,
  };
  // repeated .Net.Iface members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::Net::Iface* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField<::Net::Iface>* mutable_members();

  private:
  const ::google::protobuf::RepeatedPtrField<::Net::Iface>& _internal_members() const;
  ::google::protobuf::RepeatedPtrField<::Net::Iface>* _internal_mutable_members();
  public:
  const ::Net::Iface& members(int index) const;
  ::Net::Iface* add_members();
  const ::google::protobuf::RepeatedPtrField<::Net::Iface>& members() const;
  // string lag_id = 1;
  void clear_lag_id() ;
  const std::string& lag_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lag_id(Arg_&& arg, Args_... args);
  std::string* mutable_lag_id();
  PROTOBUF_NODISCARD std::string* release_lag_id();
  void set_allocated_lag_id(std::string* value);

  private:
  const std::string& _internal_lag_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lag_id(
      const std::string& value);
  std::string* _internal_mutable_lag_id();

  public:
  // @@protoc_insertion_point(class_scope:Net.LagMember)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::Net::Iface > members_;
    ::google::protobuf::internal::ArenaStringPtr lag_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lag_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Lag

// string id = 1;
inline void Lag::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Lag::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Net.Lag.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Lag::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Net.Lag.id)
}
inline std::string* Lag::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Net.Lag.id)
  return _s;
}
inline const std::string& Lag::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Lag::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Lag::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Lag::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Net.Lag.id)
  return _impl_.id_.Release();
}
inline void Lag::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.Lag.id)
}

// -------------------------------------------------------------------

// LagMember

// string lag_id = 1;
inline void LagMember::clear_lag_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lag_id_.ClearToEmpty();
}
inline const std::string& LagMember::lag_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Net.LagMember.lag_id)
  return _internal_lag_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LagMember::set_lag_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lag_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Net.LagMember.lag_id)
}
inline std::string* LagMember::mutable_lag_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lag_id();
  // @@protoc_insertion_point(field_mutable:Net.LagMember.lag_id)
  return _s;
}
inline const std::string& LagMember::_internal_lag_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lag_id_.Get();
}
inline void LagMember::_internal_set_lag_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lag_id_.Set(value, GetArena());
}
inline std::string* LagMember::_internal_mutable_lag_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.lag_id_.Mutable( GetArena());
}
inline std::string* LagMember::release_lag_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Net.LagMember.lag_id)
  return _impl_.lag_id_.Release();
}
inline void LagMember::set_allocated_lag_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lag_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lag_id_.IsDefault()) {
          _impl_.lag_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LagMember.lag_id)
}

// repeated .Net.Iface members = 2;
inline int LagMember::_internal_members_size() const {
  return _internal_members().size();
}
inline int LagMember::members_size() const {
  return _internal_members_size();
}
inline ::Net::Iface* LagMember::mutable_members(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Net.LagMember.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Net::Iface>* LagMember::mutable_members()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Net.LagMember.members)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_members();
}
inline const ::Net::Iface& LagMember::members(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Net.LagMember.members)
  return _internal_members().Get(index);
}
inline ::Net::Iface* LagMember::add_members() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Net::Iface* _add = _internal_mutable_members()->Add();
  // @@protoc_insertion_point(field_add:Net.LagMember.members)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Net::Iface>& LagMember::members() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Net.LagMember.members)
  return _internal_members();
}
inline const ::google::protobuf::RepeatedPtrField<::Net::Iface>&
LagMember::_internal_members() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.members_;
}
inline ::google::protobuf::RepeatedPtrField<::Net::Iface>*
LagMember::_internal_mutable_members() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.members_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Net


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lag_2eproto_2epb_2eh
