// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lag.proto
#ifndef GRPC_lag_2eproto__INCLUDED
#define GRPC_lag_2eproto__INCLUDED

#include "lag.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Net {

// The LAG service definition.
class LagManagement final {
 public:
  static constexpr char const* service_full_name() {
    return "Net.LagManagement";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncCreateLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncCreateLagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncCreateLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncCreateLagRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncDeleteLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncDeleteLagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncDeleteLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncDeleteLagRaw(context, request, cq));
    }
    virtual ::grpc::Status AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncAddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncAddLagMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncAddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncAddLagMemberRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncRemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncRemoveLagMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncRemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncRemoveLagMemberRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncCreateLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncCreateLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncDeleteLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncDeleteLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncAddLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncAddLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncRemoveLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncRemoveLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncCreateLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncCreateLagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncCreateLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncCreateLagRaw(context, request, cq));
    }
    ::grpc::Status DeleteLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncDeleteLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncDeleteLagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncDeleteLag(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncDeleteLagRaw(context, request, cq));
    }
    ::grpc::Status AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncAddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncAddLagMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncAddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncAddLagMemberRaw(context, request, cq));
    }
    ::grpc::Status RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncRemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncRemoveLagMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncRemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncRemoveLagMemberRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void CreateLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void DeleteLag(::grpc::ClientContext* context, const ::Net::Lag* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncCreateLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncCreateLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncDeleteLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncDeleteLagRaw(::grpc::ClientContext* context, const ::Net::Lag& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncAddLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncAddLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncRemoveLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncRemoveLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLag_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLag_;
    const ::grpc::internal::RpcMethod rpcmethod_AddLagMember_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveLagMember_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateLag(::grpc::ServerContext* context, const ::Net::Lag* request, ::Net::Result* response);
    virtual ::grpc::Status DeleteLag(::grpc::ServerContext* context, const ::Net::Lag* request, ::Net::Result* response);
    virtual ::grpc::Status AddLagMember(::grpc::ServerContext* context, const ::Net::LagMember* request, ::Net::Result* response);
    virtual ::grpc::Status RemoveLagMember(::grpc::ServerContext* context, const ::Net::LagMember* request, ::Net::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateLag() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLag(::grpc::ServerContext* context, ::Net::Lag* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLag() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLag(::grpc::ServerContext* context, ::Net::Lag* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddLagMember() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLagMember(::grpc::ServerContext* context, ::Net::LagMember* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveLagMember() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveLagMember(::grpc::ServerContext* context, ::Net::LagMember* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateLag<WithAsyncMethod_DeleteLag<WithAsyncMethod_AddLagMember<WithAsyncMethod_RemoveLagMember<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateLag() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::Lag, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::Lag* request, ::Net::Result* response) { return this->CreateLag(context, request, response); }));}
    void SetMessageAllocatorFor_CreateLag(
        ::grpc::MessageAllocator< ::Net::Lag, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::Lag, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLag(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteLag() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::Lag, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::Lag* request, ::Net::Result* response) { return this->DeleteLag(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLag(
        ::grpc::MessageAllocator< ::Net::Lag, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::Lag, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLag(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddLagMember() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::LagMember, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::LagMember* request, ::Net::Result* response) { return this->AddLagMember(context, request, response); }));}
    void SetMessageAllocatorFor_AddLagMember(
        ::grpc::MessageAllocator< ::Net::LagMember, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::LagMember, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddLagMember(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveLagMember() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::LagMember, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::LagMember* request, ::Net::Result* response) { return this->RemoveLagMember(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveLagMember(
        ::grpc::MessageAllocator< ::Net::LagMember, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::LagMember, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveLagMember(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateLag<WithCallbackMethod_DeleteLag<WithCallbackMethod_AddLagMember<WithCallbackMethod_RemoveLagMember<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateLag() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLag() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddLagMember() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveLagMember() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateLag() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLag() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddLagMember() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLagMember(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveLagMember() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveLagMember(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateLag() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateLag(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteLag() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLag(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddLagMember() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddLagMember(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddLagMember(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveLagMember() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveLagMember(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveLagMember(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateLag() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::Lag, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::Lag, ::Net::Result>* streamer) {
                       return this->StreamedCreateLag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::Lag,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLag() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::Lag, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::Lag, ::Net::Result>* streamer) {
                       return this->StreamedDeleteLag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLag(::grpc::ServerContext* /*context*/, const ::Net::Lag* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::Lag,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddLagMember() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::LagMember, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::LagMember, ::Net::Result>* streamer) {
                       return this->StreamedAddLagMember(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddLagMember(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::LagMember,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveLagMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveLagMember() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::LagMember, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::LagMember, ::Net::Result>* streamer) {
                       return this->StreamedRemoveLagMember(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveLagMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveLagMember(::grpc::ServerContext* /*context*/, const ::Net::LagMember* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveLagMember(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::LagMember,::Net::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateLag<WithStreamedUnaryMethod_DeleteLag<WithStreamedUnaryMethod_AddLagMember<WithStreamedUnaryMethod_RemoveLagMember<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateLag<WithStreamedUnaryMethod_DeleteLag<WithStreamedUnaryMethod_AddLagMember<WithStreamedUnaryMethod_RemoveLagMember<Service > > > > StreamedService;
};

}  // namespace Net


#endif  // GRPC_lag_2eproto__INCLUDED
