// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: port.proto
#ifndef GRPC_port_2eproto__INCLUDED
#define GRPC_port_2eproto__INCLUDED

#include "port.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Net {

class PortManagement final {
 public:
  static constexpr char const* service_full_name() {
    return "Net.PortManagement";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreatePort(::grpc::ClientContext* context, const ::Net::Port& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncCreatePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncCreatePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncCreatePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncCreatePortRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePort(::grpc::ClientContext* context, const ::Net::Port& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncDeletePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncDeletePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncDeletePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncDeletePortRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::Net::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> AsyncSetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(AsyncSetPortBreakoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>> PrepareAsyncSetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>>(PrepareAsyncSetPortBreakoutRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreatePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode* request, ::Net::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncCreatePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncCreatePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncDeletePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncDeletePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* AsyncSetPortBreakoutRaw(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Net::Result>* PrepareAsyncSetPortBreakoutRaw(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreatePort(::grpc::ClientContext* context, const ::Net::Port& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncCreatePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncCreatePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncCreatePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncCreatePortRaw(context, request, cq));
    }
    ::grpc::Status DeletePort(::grpc::ClientContext* context, const ::Net::Port& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncDeletePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncDeletePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncDeletePort(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncDeletePortRaw(context, request, cq));
    }
    ::grpc::Status SetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::Net::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> AsyncSetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(AsyncSetPortBreakoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>> PrepareAsyncSetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Net::Result>>(PrepareAsyncSetPortBreakoutRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreatePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void CreatePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void DeletePort(::grpc::ClientContext* context, const ::Net::Port* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode* request, ::Net::Result* response, std::function<void(::grpc::Status)>) override;
      void SetPortBreakout(::grpc::ClientContext* context, const ::Net::PortBreakoutMode* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncCreatePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncCreatePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncDeletePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncDeletePortRaw(::grpc::ClientContext* context, const ::Net::Port& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* AsyncSetPortBreakoutRaw(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Net::Result>* PrepareAsyncSetPortBreakoutRaw(::grpc::ClientContext* context, const ::Net::PortBreakoutMode& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePort_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePort_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPortBreakout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreatePort(::grpc::ServerContext* context, const ::Net::Port* request, ::Net::Result* response);
    virtual ::grpc::Status DeletePort(::grpc::ServerContext* context, const ::Net::Port* request, ::Net::Result* response);
    virtual ::grpc::Status SetPortBreakout(::grpc::ServerContext* context, const ::Net::PortBreakoutMode* request, ::Net::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePort() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreatePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePort(::grpc::ServerContext* context, ::Net::Port* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePort() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeletePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePort(::grpc::ServerContext* context, ::Net::Port* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPortBreakout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPortBreakout() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetPortBreakout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPortBreakout(::grpc::ServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPortBreakout(::grpc::ServerContext* context, ::Net::PortBreakoutMode* request, ::grpc::ServerAsyncResponseWriter< ::Net::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreatePort<WithAsyncMethod_DeletePort<WithAsyncMethod_SetPortBreakout<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePort() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::Port, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::Port* request, ::Net::Result* response) { return this->CreatePort(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePort(
        ::grpc::MessageAllocator< ::Net::Port, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::Port, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePort(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePort() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::Port, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::Port* request, ::Net::Result* response) { return this->DeletePort(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePort(
        ::grpc::MessageAllocator< ::Net::Port, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::Port, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePort(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPortBreakout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPortBreakout() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Net::PortBreakoutMode, ::Net::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Net::PortBreakoutMode* request, ::Net::Result* response) { return this->SetPortBreakout(context, request, response); }));}
    void SetMessageAllocatorFor_SetPortBreakout(
        ::grpc::MessageAllocator< ::Net::PortBreakoutMode, ::Net::Result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Net::PortBreakoutMode, ::Net::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPortBreakout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPortBreakout(::grpc::ServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPortBreakout(
      ::grpc::CallbackServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreatePort<WithCallbackMethod_DeletePort<WithCallbackMethod_SetPortBreakout<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePort() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreatePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePort() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeletePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPortBreakout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPortBreakout() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetPortBreakout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPortBreakout(::grpc::ServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePort() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreatePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePort() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeletePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPortBreakout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPortBreakout() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetPortBreakout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPortBreakout(::grpc::ServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPortBreakout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePort() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePort() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPortBreakout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPortBreakout() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPortBreakout(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPortBreakout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPortBreakout(::grpc::ServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPortBreakout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePort() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::Port, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::Port, ::Net::Result>* streamer) {
                       return this->StreamedCreatePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::Port,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePort() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::Port, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::Port, ::Net::Result>* streamer) {
                       return this->StreamedDeletePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePort(::grpc::ServerContext* /*context*/, const ::Net::Port* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::Port,::Net::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPortBreakout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPortBreakout() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Net::PortBreakoutMode, ::Net::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Net::PortBreakoutMode, ::Net::Result>* streamer) {
                       return this->StreamedSetPortBreakout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPortBreakout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPortBreakout(::grpc::ServerContext* /*context*/, const ::Net::PortBreakoutMode* /*request*/, ::Net::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPortBreakout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Net::PortBreakoutMode,::Net::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreatePort<WithStreamedUnaryMethod_DeletePort<WithStreamedUnaryMethod_SetPortBreakout<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreatePort<WithStreamedUnaryMethod_DeletePort<WithStreamedUnaryMethod_SetPortBreakout<Service > > > StreamedService;
};

}  // namespace Net


#endif  // GRPC_port_2eproto__INCLUDED
