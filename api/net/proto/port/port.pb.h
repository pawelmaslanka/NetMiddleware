// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: port.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_port_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_port_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_port_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_port_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_port_2eproto;
namespace Net {
class Port;
struct PortDefaultTypeInternal;
extern PortDefaultTypeInternal _Port_default_instance_;
class PortBreakoutMode;
struct PortBreakoutModeDefaultTypeInternal;
extern PortBreakoutModeDefaultTypeInternal _PortBreakoutMode_default_instance_;
}  // namespace Net
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Net {
enum BreakoutMode : int {
  BREAKOUT_NONE = 0,
  BREAKOUT_4X100G = 1,
  BreakoutMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BreakoutMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BreakoutMode_IsValid(int value);
extern const uint32_t BreakoutMode_internal_data_[];
constexpr BreakoutMode BreakoutMode_MIN = static_cast<BreakoutMode>(0);
constexpr BreakoutMode BreakoutMode_MAX = static_cast<BreakoutMode>(1);
constexpr int BreakoutMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
BreakoutMode_descriptor();
template <typename T>
const std::string& BreakoutMode_Name(T value) {
  static_assert(std::is_same<T, BreakoutMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BreakoutMode_Name().");
  return BreakoutMode_Name(static_cast<BreakoutMode>(value));
}
template <>
inline const std::string& BreakoutMode_Name(BreakoutMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BreakoutMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool BreakoutMode_Parse(absl::string_view name, BreakoutMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BreakoutMode>(
      BreakoutMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Port final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Net.Port) */ {
 public:
  inline Port() : Port(nullptr) {}
  ~Port() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Port(
      ::google::protobuf::internal::ConstantInitialized);

  inline Port(const Port& from) : Port(nullptr, from) {}
  inline Port(Port&& from) noexcept
      : Port(nullptr, std::move(from)) {}
  inline Port& operator=(const Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline Port& operator=(Port&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Port& default_instance() {
    return *internal_default_instance();
  }
  static inline const Port* internal_default_instance() {
    return reinterpret_cast<const Port*>(
        &_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Port& a, Port& b) { a.Swap(&b); }
  inline void Swap(Port* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Port* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Port* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Port>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Port& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Port& from) { Port::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Port* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Net.Port"; }

 protected:
  explicit Port(::google::protobuf::Arena* arena);
  Port(::google::protobuf::Arena* arena, const Port& from);
  Port(::google::protobuf::Arena* arena, Port&& from) noexcept
      : Port(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:Net.Port)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      19, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_port_2eproto;
};
// -------------------------------------------------------------------

class PortBreakoutMode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Net.PortBreakoutMode) */ {
 public:
  inline PortBreakoutMode() : PortBreakoutMode(nullptr) {}
  ~PortBreakoutMode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortBreakoutMode(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortBreakoutMode(const PortBreakoutMode& from) : PortBreakoutMode(nullptr, from) {}
  inline PortBreakoutMode(PortBreakoutMode&& from) noexcept
      : PortBreakoutMode(nullptr, std::move(from)) {}
  inline PortBreakoutMode& operator=(const PortBreakoutMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortBreakoutMode& operator=(PortBreakoutMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortBreakoutMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortBreakoutMode* internal_default_instance() {
    return reinterpret_cast<const PortBreakoutMode*>(
        &_PortBreakoutMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PortBreakoutMode& a, PortBreakoutMode& b) { a.Swap(&b); }
  inline void Swap(PortBreakoutMode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortBreakoutMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortBreakoutMode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PortBreakoutMode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortBreakoutMode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortBreakoutMode& from) { PortBreakoutMode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PortBreakoutMode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Net.PortBreakoutMode"; }

 protected:
  explicit PortBreakoutMode(::google::protobuf::Arena* arena);
  PortBreakoutMode(::google::protobuf::Arena* arena, const PortBreakoutMode& from);
  PortBreakoutMode(::google::protobuf::Arena* arena, PortBreakoutMode&& from) noexcept
      : PortBreakoutMode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPortFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // .Net.Port port = 1;
  bool has_port() const;
  void clear_port() ;
  const ::Net::Port& port() const;
  PROTOBUF_NODISCARD ::Net::Port* release_port();
  ::Net::Port* mutable_port();
  void set_allocated_port(::Net::Port* value);
  void unsafe_arena_set_allocated_port(::Net::Port* value);
  ::Net::Port* unsafe_arena_release_port();

  private:
  const ::Net::Port& _internal_port() const;
  ::Net::Port* _internal_mutable_port();

  public:
  // .Net.BreakoutMode mode = 2;
  void clear_mode() ;
  ::Net::BreakoutMode mode() const;
  void set_mode(::Net::BreakoutMode value);

  private:
  ::Net::BreakoutMode _internal_mode() const;
  void _internal_set_mode(::Net::BreakoutMode value);

  public:
  // @@protoc_insertion_point(class_scope:Net.PortBreakoutMode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Net::Port* port_;
    int mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_port_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Port

// string id = 1;
inline void Port::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Port::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Net.Port.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Port::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Net.Port.id)
}
inline std::string* Port::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Net.Port.id)
  return _s;
}
inline const std::string& Port::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Port::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Port::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Port::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Net.Port.id)
  return _impl_.id_.Release();
}
inline void Port::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.Port.id)
}

// -------------------------------------------------------------------

// PortBreakoutMode

// .Net.Port port = 1;
inline bool PortBreakoutMode::has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.port_ != nullptr);
  return value;
}
inline void PortBreakoutMode::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.port_ != nullptr) _impl_.port_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Net::Port& PortBreakoutMode::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Net::Port* p = _impl_.port_;
  return p != nullptr ? *p : reinterpret_cast<const ::Net::Port&>(::Net::_Port_default_instance_);
}
inline const ::Net::Port& PortBreakoutMode::port() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Net.PortBreakoutMode.port)
  return _internal_port();
}
inline void PortBreakoutMode::unsafe_arena_set_allocated_port(::Net::Port* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.port_);
  }
  _impl_.port_ = reinterpret_cast<::Net::Port*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Net.PortBreakoutMode.port)
}
inline ::Net::Port* PortBreakoutMode::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Net::Port* released = _impl_.port_;
  _impl_.port_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Net::Port* PortBreakoutMode::unsafe_arena_release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Net.PortBreakoutMode.port)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Net::Port* temp = _impl_.port_;
  _impl_.port_ = nullptr;
  return temp;
}
inline ::Net::Port* PortBreakoutMode::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.port_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Net::Port>(GetArena());
    _impl_.port_ = reinterpret_cast<::Net::Port*>(p);
  }
  return _impl_.port_;
}
inline ::Net::Port* PortBreakoutMode::mutable_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Net::Port* _msg = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:Net.PortBreakoutMode.port)
  return _msg;
}
inline void PortBreakoutMode::set_allocated_port(::Net::Port* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.port_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.port_ = reinterpret_cast<::Net::Port*>(value);
  // @@protoc_insertion_point(field_set_allocated:Net.PortBreakoutMode.port)
}

// .Net.BreakoutMode mode = 2;
inline void PortBreakoutMode::clear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = 0;
}
inline ::Net::BreakoutMode PortBreakoutMode::mode() const {
  // @@protoc_insertion_point(field_get:Net.PortBreakoutMode.mode)
  return _internal_mode();
}
inline void PortBreakoutMode::set_mode(::Net::BreakoutMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Net.PortBreakoutMode.mode)
}
inline ::Net::BreakoutMode PortBreakoutMode::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Net::BreakoutMode>(_impl_.mode_);
}
inline void PortBreakoutMode::_internal_set_mode(::Net::BreakoutMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Net


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Net::BreakoutMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Net::BreakoutMode>() {
  return ::Net::BreakoutMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_port_2eproto_2epb_2eh
