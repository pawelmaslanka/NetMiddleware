// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lag.proto

#include "lag.pb.h"
#include "lag.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Net {

static const char* LagManagement_method_names[] = {
  "/Net.LagManagement/CreateLag",
  "/Net.LagManagement/DeleteLag",
  "/Net.LagManagement/AddLagMember",
  "/Net.LagManagement/RemoveLagMember",
};

std::unique_ptr< LagManagement::Stub> LagManagement::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LagManagement::Stub> stub(new LagManagement::Stub(channel, options));
  return stub;
}

LagManagement::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateLag_(LagManagement_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteLag_(LagManagement_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddLagMember_(LagManagement_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveLagMember_(LagManagement_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LagManagement::Stub::CreateLag(::grpc::ClientContext* context, const ::Net::LagIface& request, ::Net::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Net::LagIface, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateLag_, context, request, response);
}

void LagManagement::Stub::async::CreateLag(::grpc::ClientContext* context, const ::Net::LagIface* request, ::Net::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Net::LagIface, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLag_, context, request, response, std::move(f));
}

void LagManagement::Stub::async::CreateLag(::grpc::ClientContext* context, const ::Net::LagIface* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::PrepareAsyncCreateLagRaw(::grpc::ClientContext* context, const ::Net::LagIface& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Net::Result, ::Net::LagIface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateLag_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::AsyncCreateLagRaw(::grpc::ClientContext* context, const ::Net::LagIface& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateLagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LagManagement::Stub::DeleteLag(::grpc::ClientContext* context, const ::Net::LagIface& request, ::Net::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Net::LagIface, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteLag_, context, request, response);
}

void LagManagement::Stub::async::DeleteLag(::grpc::ClientContext* context, const ::Net::LagIface* request, ::Net::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Net::LagIface, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLag_, context, request, response, std::move(f));
}

void LagManagement::Stub::async::DeleteLag(::grpc::ClientContext* context, const ::Net::LagIface* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::PrepareAsyncDeleteLagRaw(::grpc::ClientContext* context, const ::Net::LagIface& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Net::Result, ::Net::LagIface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteLag_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::AsyncDeleteLagRaw(::grpc::ClientContext* context, const ::Net::LagIface& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteLagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LagManagement::Stub::AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::Net::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Net::LagMember, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddLagMember_, context, request, response);
}

void LagManagement::Stub::async::AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Net::LagMember, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddLagMember_, context, request, response, std::move(f));
}

void LagManagement::Stub::async::AddLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddLagMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::PrepareAsyncAddLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Net::Result, ::Net::LagMember, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddLagMember_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::AsyncAddLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddLagMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LagManagement::Stub::RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember& request, ::Net::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Net::LagMember, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveLagMember_, context, request, response);
}

void LagManagement::Stub::async::RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Net::LagMember, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveLagMember_, context, request, response, std::move(f));
}

void LagManagement::Stub::async::RemoveLagMember(::grpc::ClientContext* context, const ::Net::LagMember* request, ::Net::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveLagMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::PrepareAsyncRemoveLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Net::Result, ::Net::LagMember, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveLagMember_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Net::Result>* LagManagement::Stub::AsyncRemoveLagMemberRaw(::grpc::ClientContext* context, const ::Net::LagMember& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveLagMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

LagManagement::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LagManagement_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LagManagement::Service, ::Net::LagIface, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LagManagement::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Net::LagIface* req,
             ::Net::Result* resp) {
               return service->CreateLag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LagManagement_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LagManagement::Service, ::Net::LagIface, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LagManagement::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Net::LagIface* req,
             ::Net::Result* resp) {
               return service->DeleteLag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LagManagement_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LagManagement::Service, ::Net::LagMember, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LagManagement::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Net::LagMember* req,
             ::Net::Result* resp) {
               return service->AddLagMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LagManagement_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LagManagement::Service, ::Net::LagMember, ::Net::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LagManagement::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Net::LagMember* req,
             ::Net::Result* resp) {
               return service->RemoveLagMember(ctx, req, resp);
             }, this)));
}

LagManagement::Service::~Service() {
}

::grpc::Status LagManagement::Service::CreateLag(::grpc::ServerContext* context, const ::Net::LagIface* request, ::Net::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LagManagement::Service::DeleteLag(::grpc::ServerContext* context, const ::Net::LagIface* request, ::Net::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LagManagement::Service::AddLagMember(::grpc::ServerContext* context, const ::Net::LagMember* request, ::Net::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LagManagement::Service::RemoveLagMember(::grpc::ServerContext* context, const ::Net::LagMember* request, ::Net::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Net

